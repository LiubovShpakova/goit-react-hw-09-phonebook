{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contacts/operations.jsx","redux/contacts/selectors.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/Modal/modal.jsx","pages/ContactsPage.jsx"],"names":["module","exports","axios","defaults","baseURL","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Styles","styled","div","ContactForm","useState","setName","number","setNumber","handleChange","event","target","value","useSelector","dispatch","useDispatch","onSubmit","useCallback","id","uuidv4","contactActions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","addContact","nameInputId","numberInputId","Form","e","preventDefault","sameName","find","el","sameNumber","toast","className","createContact","Group","Label","Control","type","placeholder","onChange","pattern","title","required","Button","variant","autoClose","Filter","changeFilter","defaultProps","ContactList","onOpenModal","onDeleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","length","style","contact__container","sort","a","b","localeCompare","map","contact_list","onClick","size","modalRoot","document","querySelector","Modal","contactEdit","onClose","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","currentTarget","update","updateContact","editContactRequest","patch","editContactSuccess","editContactError","message","ContactsPage","isOpenModal","setIsOpenModal","editContact","setEditContact","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","Container"],"mappings":"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","file":"static/js/5.e099dfee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__jtevo\",\"contact__container\":\"ContactList_contact__container__2Qw8i\"};","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport contactActions from './actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(contactActions.fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(contactActions.fetchContactsError(error)));\r\n};\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(contactActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(contactActions.addContactSuccess(data)))\r\n    .catch(error => dispatch(contactActions.addContactError(error)));\r\n};\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(contactActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactActions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(contactActions.deleteContactError(error)));\r\n};\r\nexport const editContact = (id, update) => dispatch => {\r\n  dispatch(contactActions.editContactRequest());\r\n  axios\r\n    .patch(`/contacts/${id}`, update)\r\n    .then(({ data }) => dispatch(contactActions.editContactSuccess(data)))\r\n    .catch(error => dispatch(contactActions.editContactError(error.message)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n      \r\n      const normalizedFilter = filter.toLowerCase();\r\n  \r\n      return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    },\r\n  );\r\n","import { useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport { getAllContacts } from '../../redux/contacts/selectors';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n  .form-control {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const items = useSelector(getAllContacts);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = useCallback(\r\n    (name, number) => {\r\n      dispatch(addContact(name, number));\r\n    },\r\n    [dispatch],\r\n  );\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const createContact = () => {\r\n    const sameName = items.find(\r\n      el => el.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    const sameNumber = items.find(el => el.number === number);\r\n    if (sameName || sameNumber) {\r\n      toast.error(`${name} or ${number} is already in contacts`, {\r\n        className: 'error_toast',\r\n      });\r\n      return;\r\n    } else {\r\n      onSubmit(name, number);\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    createContact();\r\n    // console.log(name, number);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Styles>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id={nameInputId}\r\n              placeholder=\"Enter contact name\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id={numberInputId}\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={handleChange}\r\n              placeholder=\"Enter contact number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"secondary\" type=\"submit\" className=\"mb-5\">\r\n            Add contact\r\n          </Button>\r\n        </Form>\r\n      </Styles>\r\n      <ToastContainer autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport contactActions from '../../redux/contacts/actions';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .form-control {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = useCallback(\r\n    event => {\r\n      dispatch(contactActions.changeFilter(event.target.value));\r\n    },\r\n    [dispatch],\r\n  );\r\n  return (\r\n    <Styles>\r\n      <h2>Contacts</h2>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Find Contacts By Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter contact name\"\r\n            value={value}\r\n            onChange={onChange}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FiEdit } from 'react-icons/fi';\r\nimport { RiDeleteBin7Line } from 'react-icons/ri';\r\nimport { deleteContact } from '../../redux/contacts/operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport style from './ContactList.module.css';\r\n\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n`;\r\n\r\nexport default function ContactList({ onOpenModal }) {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(getVisibleContacts);\r\n  const onDeleteContact = useCallback(\r\n    id => {\r\n      dispatch(deleteContact(id));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    items.length > 0 && (\r\n      <ul className={style.contact__container}>\r\n        {items\r\n          .sort((a, b) => a.name.localeCompare(b.name))\r\n          .map(contact => {\r\n            const { id, name, number } = contact;\r\n            return (\r\n              <li className={style.contact_list} key={id}>\r\n                {name}: {number}\r\n                <Styles>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"ml-1\"\r\n                    type=\"button\"\r\n                    onClick={() => onOpenModal(contact)}\r\n                  >\r\n                    <FiEdit size=\"20\" />\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"ml-1\"\r\n                    type=\"button\"\r\n                    onClick={() => onDeleteContact(id)}\r\n                  >\r\n                    <RiDeleteBin7Line size=\"20\" />\r\n                  </Button>\r\n                </Styles>\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    )\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createPortal } from 'react-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { editContact } from '../../redux/contacts/operations';\r\nimport { AiFillCloseCircle } from 'react-icons/ai';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n  .close__button {\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 10px;\r\n  }\r\n`;\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal({ contactEdit, onClose }) {\r\n  const [name, setName] = useState(contactEdit.name);\r\n  const [number, setNumber] = useState(contactEdit.number);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = e => {\r\n      if (e.code === 'Escape') {\r\n        onClose(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [onClose]);\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const updateContact = {\r\n      name: name ? name : contactEdit.name,\r\n      number: number ? number : contactEdit.number,\r\n    };\r\n    dispatch(editContact(contactEdit.id, updateContact));\r\n    onClose(false);\r\n  };\r\n  useEffect(() => {\r\n    setName(name);\r\n    setNumber(number);\r\n  }, [name, number]);\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={e => handleBackdropClick(e)}>\r\n      <div className=\"form__modal\">\r\n        <Styles>\r\n          <Form>\r\n            <Button\r\n              variant=\"secondary\"\r\n              type=\"button\"\r\n              onClick={() => onClose(false)}\r\n              className=\"close__button\"\r\n            >\r\n              <AiFillCloseCircle size=\"20\" />\r\n            </Button>\r\n            <Form.Group>\r\n              <Form.Label>Edit contact name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                id={nameInputId}\r\n                placeholder={contactEdit.name}\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={handleChange}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Edit contact number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                id={numberInputId}\r\n                name=\"number\"\r\n                value={number}\r\n                onChange={handleChange}\r\n                placeholder={contactEdit.number}\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"secondary\" type=\"button\" onClick={handleSave}>\r\n              Save\r\n            </Button>\r\n          </Form>\r\n        </Styles>\r\n      </div>\r\n    </div>,\r\n    modalRoot,\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ContactForm from '../components/Form/Form';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Modal from '../components/Modal/modal';\r\nimport { fetchContacts } from '../redux/contacts/operations';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport default function ContactsPage() {\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n  const [editContact, setEditContact] = useState({});\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpenModal = contact => {\r\n    setIsOpenModal(true);\r\n    setEditContact(contact);\r\n  };\r\n  const handleCloseModal = () => {\r\n    setEditContact(null);\r\n  };\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList onOpenModal={handleOpenModal} />\r\n      {isOpenModal && editContact && (\r\n        <Modal onClose={handleCloseModal} contactEdit={editContact} />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}