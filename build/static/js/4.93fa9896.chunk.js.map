{"version":3,"sources":["components/ContactList/ContactList.module.css","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","redux/contacts/operations.jsx","redux/contacts/selectors.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"names":["module","exports","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","axios","defaults","baseURL","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","contact","name","includes","Styles","styled","div","ContactForm","useState","setName","number","setNumber","handleChange","event","target","value","useSelector","dispatch","useDispatch","onSubmit","useCallback","id","uuidv4","contactActions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","addContact","nameInputId","numberInputId","Form","e","preventDefault","sameName","find","el","sameNumber","toast","className","createContact","console","log","Group","Label","Control","type","placeholder","onChange","pattern","title","required","Button","variant","autoClose","Filter","changeFilter","defaultProps","ContactList","onDeleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","style","contact__container","map","contact_list","onClick","ContactsPage","Container"],"mappings":"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","file":"static/js/4.93fa9896.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__jtevo\",\"contact__container\":\"ContactList_contact__container__2Qw8i\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport contactActions from './actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(contactActions.fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactActions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(contactActions.fetchContactsError(error)));\r\n};\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(contactActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(contactActions.addContactSuccess(data)))\r\n    .catch(error => dispatch(contactActions.addContactError(error)));\r\n};\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(contactActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactActions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(contactActions.deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n      \r\n      const normalizedFilter = filter.toLowerCase();\r\n  \r\n      return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    },\r\n  );\r\n","import { useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport { getAllContacts } from '../../redux/contacts/selectors';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n  .form-control {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const items = useSelector(getAllContacts);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = useCallback(\r\n    (name, number) => {\r\n      dispatch(addContact(name, number));\r\n    },\r\n    [dispatch],\r\n  );\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const createContact = () => {\r\n    const sameName = items.find(\r\n      el => el.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    const sameNumber = items.find(el => el.number === number);\r\n    if (sameName || sameNumber) {\r\n      toast.error(`${name} or ${number} is already in contacts`, {\r\n        className: 'error_toast',\r\n      });\r\n      return;\r\n    } else {\r\n      onSubmit(name, number);\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    createContact();\r\n    console.log(name, number);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Styles>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id={nameInputId}\r\n              placeholder=\"Enter contact name\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Number</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              id={numberInputId}\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={handleChange}\r\n              placeholder=\"Enter contact number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"secondary\" type=\"submit\" className=\"mb-5\">\r\n            Add contact\r\n          </Button>\r\n        </Form>\r\n      </Styles>\r\n      <ToastContainer autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n\r\n/*import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport { getAllContacts } from '../../redux/contacts/selectors';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n  .form-control {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n  createContact = () => {\r\n    const { name, number } = this.state;\r\n    const { onSubmit, items } = this.props;\r\n\r\n    const sameName = items.find(\r\n      el => el.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    /* const sameNumber = items.find(el => el.number === number);\r\n\r\n     if (sameName || sameNumber) {\r\n      alert(`${name} or ${number} is already in contacts`);\r\n      return;\r\n    } else {\r\n      onSubmit(name, number);\r\n    }*/\r\n/*if (sameName) {\r\n      toast.error(`${name} is already in contacts`, {\r\n        className: 'error_toast',\r\n      });\r\n      return;\r\n    } else {\r\n      onSubmit(name, number);\r\n    }\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.createContact();\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Styles>\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                id={this.nameInputId}\r\n                placeholder=\"Enter contact name\"\r\n                name=\"name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Number</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                id={this.numberInputId}\r\n                name=\"number\"\r\n                value={this.state.number}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter contact number\"\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"secondary\" type=\"submit\" className=\"mb-5\">\r\n              Add contact\r\n            </Button>\r\n          </Form>\r\n        </Styles>\r\n        <ToastContainer autoClose={3000} />\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  items: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\nContactForm.propTypes = { onSubmit: PropTypes.func.isRequired };*/\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport contactActions from '../../redux/contacts/actions';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\nimport { Form } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .form-control {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = useCallback(\r\n    event => {\r\n      dispatch(contactActions.changeFilter(event.target.value));\r\n    },\r\n    [dispatch],\r\n  );\r\n  return (\r\n    <Styles>\r\n      <h2>Contacts</h2>\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Label>Find Contacts By Name</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter contact name\"\r\n            value={value}\r\n            onChange={onChange}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nFilter.defaultProps = {\r\n  value: '',\r\n};\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Button } from 'react-bootstrap';\r\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\r\nimport PropTypes from 'prop-types';\r\nimport style from './ContactList.module.css';\r\n\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .btn-secondary {\r\n    color: #d1abc4;\r\n  }\r\n`;\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(getVisibleContacts);\r\n  const onDeleteContact = useCallback(\r\n    id => {\r\n      dispatch(deleteContact(id));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('Hello fetchContacts');\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    items.length > 0 && (\r\n      <ul className={style.contact__container}>\r\n        {items.map(({ id, name, number }) => {\r\n          return (\r\n            <li className={style.contact_list} key={id}>\r\n              {name}: {number}\r\n              <Styles>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  className=\"ml-2\"\r\n                  type=\"button\"\r\n                  onClick={() => onDeleteContact(id)}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </Styles>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    )\r\n  );\r\n}\r\n\r\n/*class ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    const { items, onDeleteContact } = this.props;\r\n    return (\r\n      items.length > 0 && (\r\n        <ul className={style.contact__container}>\r\n          {items.map(({ id, name, number }) => {\r\n            return (\r\n              <li className={style.contact_list} key={id}>\r\n                {name}: {number}\r\n                <Styles>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    className=\"ml-2\"\r\n                    type=\"button\"\r\n                    onClick={() => onDeleteContact(id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </Styles>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(deleteContact(id)),\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});*/\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import ContactForm from '../components/Form/Form';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nconst ContactsPage = () => (\r\n  <Container>\r\n    <h1>Phonebook</h1>\r\n    <ContactForm />\r\n    <Filter />\r\n    <ContactList />\r\n  </Container>\r\n);\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}